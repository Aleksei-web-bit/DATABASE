«Kafka: обзор технологии, преимущества и сферы применения»

А.В. Фитисов

Глоссарий:

Command and Query Responsibility Segregation (CQRS) — подход к проектированию программного обеспечения, при котором код, изменяющий состояние, отделяется от кода, просто читающего это состояние.
Headers — пользовательские атрибуты key-value, которые прикрепляют к сообщению.
Kafka — распределенный брокер сообщений, работающий в стриминговом режиме.
Key — опциональный ключ, нужен для распределения сообщений по кластеру.
Value — массив байт, данные.
Timestamp — текущее системное время, устанавливается отправителем или кластером во время обработки.
ZooKeeper — инструмент-координатор, действует как общая служба конфигурации в системе.
Брокер — узел Kafka, отвечающий за прием, сохранение и передачу сообщений между продюсерами и консюмерами.
Коннектор — стандартизированный способ интеграции Kafka с другими системами или источниками данных.
Консюмер — получатель сообщения.
Консюмер группа — группа получателей сообщений.
Контроллер кластера — отвечает за назначение мастеров партиций и отслеживает состояние брокеров.
Офсет Kafka — это понятие, которое используется для обозначения позиции в потоке сообщений [3].
Партиция — единица многопоточности в Kafka.
Продюсер — отправитель сообщения.
Реплика — копия партиции. 
Событие или сообщение — данные, которые поступают из одного сервиса, хранятся на узлах Kafka и читаются другими сервисами.
Тема или топик — лента или категория, в которую продюсеры записывают сообщения.

Kafka — распределенный брокер сообщений, работающий в стриминговом режиме.
Брокер сообщений — система, преобразующая сообщение от источника данных (продюсера) в сообщение принимающей стороны (консьюмера).
Главная задача брокера — обеспечение связи и обмена информацией между приложениями или отдельными модулями в режиме реального времени.
Брокер выступает проводником и состоит из серверов, объединенных в кластеры.
Чтобы понять, как функционирует распределенная система Kafka, необходимо проследить путь данных.
Событие или сообщение — данные, которые поступают из одного сервиса, хранятся на узлах Kafka и читаются другими сервисами. Сообщение состоит из:
— Key — опциональный ключ, нужен для распределения сообщений по кластеру.
— Value — массив байт, данные.
— Timestamp — текущее системное время, устанавливается отправителем или кластером во время обработки.
— Headers — пользовательские атрибуты key-value, которые прикрепляют к сообщению.
Продюсер — поставщик данных, который генерирует сообщения — например, служебные события, логи, метрики, события мониторинга.
Консьюмер — потребитель данных, который читает и использует события, пример — сервис сбора статистики.
Какие трудности помогает преодолевать распределенная система?
Сообщения могут быть однотипными или разнородными, поскольку разным потребителям нужны разные данные. Один тип событий может быть нужен всем консьюмерам, а другие — только одному. 
Без брокера продюсеры должны знать получателя и резервного консьюмера, если основной недоступен. К тому же, поставщикам данных придется самостоятельно регистрировать новых консьюмеров. С помощью брокера продюсеры просто отправляют информацию в единый узел.
Сообщения хранятся на узлах-брокерах. Kafka — масштабируемый кластер со множеством взаимозаменяемых серверов, в которые добавляются новые брокеры, распределяющие задачи между собой.
ZooKeeper — инструмент-координатор, действует как общая служба конфигурации в системе. Работает как база для хранения метаданных о состоянии узлов кластера и расположении сообщений. ZooKeeper обеспечивает гибкую и надежную синхронизацию в распределенной системе, позволяя нескольким клиентам выполнять одновременно чтение и запись.
Kafka Controller — среди брокеров Zookeeper выбирает одного, который будет обеспечивать консистентность данных.
Topic — принцип деления потока данных, базовая и основная сущность Kafka. В топики складывается стрим данных, единая очередь из входящих сообщений.
Partition — для ускорения чтения и записи топики делятся на партиции. Происходит параллелизация данных. Это конфигурируемый параметр, сообщения могут отправлять несколько продюсеров и принимать несколько консьюмеров.
Упорядочение событий происходит на уровне партиций. Принимающая сторона потребляет данные в порядке расположения в партиции. Пример: все события одного пользователя сервисы принимают упорядоченно, обработка сохраняет последовательность пути пользователя. Выстраивается конвейер данных, алгоритмы машинного обучения могут извлекать из сырой информации нужные данные.
Преимущества Kafka.
Брокер распределяет информацию в широковещательном режиме. Применяющийся в Kafka подход нужен для масштабирования и репликации данных.
Горизонтальное масштабирование.
Множество объединенных серверов гарантируют высокую доступность данных — выход из строя одного из узлов не нарушает целостность. Кластер состоит из обычных машин, а не суперкомпьютеров, их можно менять и дополнять. Система автоматически перебалансируется.
Чтобы события не потерялись, существуют механизмы репликации. Данные записываются на несколько машин, если что-то случается с сервером, он переключается на резервный. Кластер в режиме реального времени определяет, где находятся данные, и продолжает их использовать.
Офсет — это понятие, которое используется для обозначения позиции в потоке сообщений. Офсет отслеживает, на каком месте в потоке находится каждый консюмер, чтобы он мог читать сообщения с нужной позиции.
Каждый раз, когда потребитель читает сообщение, его позиция сдвигается на одно сообщение вперед [3].
Если консьюмер падает в процессе получения данных, то, когда он запустится вновь и ему нужно будет вернутся к чтению этого сообщения, он воспользуется офсетом и продолжит с нужного места.
Взаимодействие через API
Брокеры решают задачу интеграции разных технических стеков и протоколов. Интеграция происходит просто: продюсерам и консьюмерам необходимо знать только API брокера. Они не контактируют между собой, с помощью чего достигается высокая интегрируемость с другими системами.
Принцип first in — first out
Принцип FIFO реализуется консьюмерами. Чтение происходит в том же порядке, в котором пришла информация [4].
Почему Kafka такая быстрая?
За последние несколько лет в сфере архитектуры ПО произошли огромные изменения. На смену идеи единственного монолитного приложения или даже нескольких крупных сервисов, разделяющих общий массив данных, пришли автономные микросервисы, событийно-ориентированная архитектура и CQRS [1].
Вдобавок быстрый рост количества подключаемых устройств (мобильных, IoT) многократно увеличивает объем событий, которые система должна оперативно обрабатывать. Кроме того, быстрый рост количества подключаемых мобильных устройств многократно увеличивает объем событий, которые система должна оперативно обрабатывать.
На интерпретацию самого слова «быстро» влияют такие показатели как latency, пропускная способность (throughput) и кратковременные задержки (jitter). Слово «быстрый» также, по сути, контекстно: индустрия и области применения сами устанавливают нормы и ожидания по производительности.
Что касается термина «реальное время», то он означает не «быстро», а «предсказуемо». В частности, режим реального времени подразумевает наличие жесткой верхней границы, называемой также крайним сроком (deadline), которая определяет время, необходимое для выполнения действия. Системы, которые могут работать в пределах вероятного отклонения, называются «близкими к реальному времени».
Есть две важные области, из которых Kafka черпает свою скорость. Первая связана с низкоуровневой реализацией клиента и брокера. Вторая проистекает из параллелизма потоковой обработки [2].
Где применяется Kafka?
Kafka применяется во множестве сценариев, связанных с обработкой и передачей данных в режиме реального времени. Приведем примеры некоторых областей, где она применяется:
1. Информационные технологии. Компании в области IT и интернет-сервисы активно используют Kafka для обработки, обмена для потоковой передачи данных.
2. Финансы. Kafka применяется в финансовой отрасли для аналитики рынка, обработки транзакций в режиме реального времени и мониторинга финансовых событий.
3. Телекоммуникации. В сфере телекоммуникаций Kafka используется для управления сообщениями и данными обмена информацией между различными системами и компонентами, а также для обработки потоковых данных и событий.
4. Интернет вещей. Системы IoT генерируют огромные объемы данных, и Kafka может быть использована для сбора, обработки и анализа потоков данных из различных устройств IoT, а также для интеграции с другими приложениями и системами.
5. Разработка приложений в режиме реального времени. Благодаря своей масштабируемости, надежности и низкой задержке, Kafka находит применение в разработке приложений в режиме реального времени, где требуется обмен данных и событий между различными компонентами и службами.
6. Аналитика. Kafka используется как основа для строительства систем аналитики данных. Она позволяет различным приложениям и службам получать данные из разных источников и использовать их для анализа и извлечения полезной информации.
7. Системы связи и сообщений. Kafka может использоваться для построения систем уведомлений и оповещений. Она позволяет отправлять сообщения в режиме реального времени и гарантирует их доставку.
8. Big Data. Kafka незаменимый инструмент для аналитики больших объемов данных. Она позволяет организациям собирать, обрабатывать и анализировать данные в режиме реального времени, что полезно для различных задач аналитики и машинного обучения.
9. Онлайн-торговля и финансы. Kafka используется для передачи торговых данных и событий в режиме реального времени. Она обеспечивает высокую производительность и надежную доставку данных, что критически важно при обработке финансовых транзакций и ведении мониторинга рынков.
10. Логистика и мониторинг. Kafka позволяет собирать данные с различных источников, таких как датчики, GPS-устройства и системы мониторинга, для обеспечения эффективного управления логистическими процессами, отслеживания поставок и мониторинга состояния оборудования.
Kafka может быть полезной везде, где требуется обработка потоков данных, эффективный обмен сообщениями и стриминг данных. Масштабируемость, отказоустойчивость и производительность делают Kafka популярным инструментом во многих индустриях.

Список использованных источников:

1. Основы CQRS [Электронный ресурс]. Режим доступа: https://habr.com/ru/companies/simbirsoft/articles/329970/, свободный (31.03.2024).
2. Почему Kafka такая быстрая [Электронный ресурс]. Режим доступа: https://habr.com/ru/companies/slurm/articles/530498/, свободный (31.03.2024).
3. Работа Apache Kafka на примерах. [Электронный ресурс]. Режим доступа: https://habr.com/ru/articles/738874/, свободный (31.03.2024).
4. Что такое Apache Kafka: как устроен и работает брокер сообщений [Электронный ресурс]. Режим доступа: https://selectel.ru/blog/apache-kafka/, свободный (31.03.2024).

Список дополнительных источников (изучены в процессе подготовки к докладу, но ссылок в тексте на данные источники нет):

Основы репликации в Kafka [Электронный ресурс]. Режим доступа: https://habr.com/ru/companies/otus/articles/790504/, свободный (31.03.2024).

Что такое Apache Kafka и для чего ее используют [Электронный ресурс]. Режим доступа: https://www.nic.ru/help/chto-takoe-apache-kafka-i-dlya-chego-ee-ispol6zuyut_11807.html#:~:text=Kafka%20%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%20%D0%B1%D1%8B%D1%82%D1%8C%20%D0%BF%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D0%BE%D0%B9%20%D0%B2%D0%B5%D0%B7%D0%B4%D0%B5,%D0%BF%D0%BE%D0%BF%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D1%8B%D0%BC%20%D0%B8%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%BC%20%D0%B2%D0%BE%20%D0%BC%D0%BD%D0%BE%D0%B3%D0%B8%D1%85%20%D0%B8%D0%BD%D0%B4%D1%83%D1%81%D1%82%D1%80%D0%B8%D1%8F%D1%85, свободный (31.03.2024).

Что такое Apache Kafka? [Электронный ресурс]. Режим доступа: https://aws.amazon.com/ru/what-is/apache-kafka/#:~:text=Kafka%20%D0%BF%D1%80%D0%B8%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D1%82%20%D0%B8%20%D1%85%D1%80%D0%B0%D0%BD%D0%B8%D1%82%20%D0%BF%D0%BE%D1%82%D0%BE%D0%BA%D0%BE%D0%B2%D1%8B%D0%B5,%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B8%D0%B2%D0%B0%D0%B5%D1%82%20%D1%81%D0%B2%D1%8F%D0%B7%D1%8C%20%D0%BC%D0%B5%D0%B6%D0%B4%D1%83%20%D0%B4%D0%B2%D1%83%D0%BC%D1%8F%20%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%D0%BC%D0%B8, свободный (31.03.2024).

Apache Kafka [Электронный ресурс]. Режим доступа: https://blog.skillfactory.ru/glossary/kafka-apache/#:~:text=Apache%20Kafka%20%E2%80%94%20%D1%80%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%BD%D0%B0%D1%8F%20%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0%20%D0%BE%D0%B1%D0%BC%D0%B5%D0%BD%D0%B0,%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%D0%BC%D0%B8%20%D0%B2%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%D0%B5%20%D1%80%D0%B5%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%B8, свободный (31.03.2024).

Apache Kafka: основы технологии [Электронный ресурс]. Режим доступа: https://slurm.io/blog/tpost/pnyjznpvr1-apache-kafka-osnovi-tehnologii, свободный (31.03.2024).

Apache Kafka: разбираемся в технологии в теории и на практике [Электронный ресурс]. Режим доступа: https://selectel.ru/blog/apache-kafka-2/#:~:text=%D0%9A%D0%BB%D0%B0%D1%81%D1%82%D0%B5%D1%80%20Apache%20Kafka%20%D1%81%D0%BE%D1%81%D1%82%D0%BE%D0%B8%D1%82%20%D0%B8%D0%B7,%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D1%83%D1%8E%D1%82%20%D1%81%D0%BE%D0%B1%D0%BE%D0%B9%20%D1%8F%D0%B4%D1%80%D0%BE%20%D0%BA%D0%BB%D0%B0%D1%81%D1%82%D0%B5%D1%80%D0%B0%20Kafka, свободный (31.03.2024).

Kafka за 20 минут. Ментальная модель и как с ней работать [Электронный ресурс]. Режим доступа: https://habr.com/ru/companies/sbermarket/articles/738634/, свободный (31.03.2024).

Kafka Replication Factor [Электронный ресурс]. Режим доступа: https://www.educba.com/kafka-replication-factor/, свободный (31.03.2024).
